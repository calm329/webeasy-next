generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // Uses connection pooling
  url       = env("POSTGRES_PRISMA_URL")
  // Uses direct connection, ⚠️ make sure to keep this to `POSTGRES_URL_NON_POOLING`
  // or you'll have dangling databases from migrations
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// model User {
//   id        Int      @id @default(autoincrement())
//   username  String   @unique
//   posts     String
//   aiResult  String
//   createdAt DateTime @default(now())
// }

model User {
  id            String          @id @default(cuid())
  name          String?
  image         String?
  emailVerified Boolean?
  email         String?         @unique
  password      String?
  sites         Site[]
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  user_id           BigInt
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Site {
  id         String   @id @default(cuid())
  subdomain  String   @unique
  title      String   @default("")
  description String   @default("")
  userId     String?
  templateId String
  logo       String?
  posts      String
  aiResult   String
  font       String    @default("")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user        User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  template    Template      @relation(fields: [templateId], references: [id], onDelete: Cascade)
  AccessToken AccessToken[]
}

model Template {
  id         String   @id @default(cuid())
  name       String
  previewUrl String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Site       Site[]
}

model AccessToken {
  id        String   @id @default(cuid())
  token     String
  userId    String
  siteId    String
  expires   DateTime
  site      Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
